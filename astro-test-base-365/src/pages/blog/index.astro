---
import MainLayout from "../../layouts/MainLayout.astro"
const PUBLIC_WORDPRESS_API_URL = import.meta.env.PUBLIC_WORDPRESS_API_URL

const endCursor = Astro.url.searchParams.get('endCursor') || 'null';
const startCursor = Astro.url.searchParams.get('startCursor') || 'null';

//
async function PostsList(endCursor, startCursor) {
  const PostsList = await fetch(`${PUBLIC_WORDPRESS_API_URL}`, {
    method: "post",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
    query: `query GET_PAGINATED_POSTS($first: Int, $after: String) {
        allSettings {
          readingSettingsPostsPerPage
        }
        posts(where: {status: PUBLISH, hasPassword: false} first: $first, after: $after) {
          pageInfo {
            hasNextPage
            endCursor
            hasPreviousPage
            startCursor
          } 
          edges {
            node {
              id
              title
              slug
              isRestricted
            }
          }
        }
        }
            `,
            variables: {
            first: 10000,
            after: endCursor,
            before:startCursor,
      }
    }),
  });
  const {data} = await PostsList.json();
  return data;
} 
const data = await PostsList(startCursor, endCursor)
//

// searchParams.delete("page");
const perPage = data?.allSettings.readingSettingsPostsPerPage || 5
const totalPosts =  data?.posts?.edges.length || 0
const totalPages = Math.ceil(totalPosts/perPage)
let actualPage: string = Astro.url.searchParams.get('page') || '1'
actualPage = actualPage
  ? (isNaN(parseInt(actualPage)) || parseInt(actualPage) > totalPages ? '1' : actualPage)
  : '1';
const offset = ( parseInt(actualPage) - 1) * perPage
let showPosts = data?.posts?.edges.slice(offset, offset + perPage) || "null";

--- 

  
<MainLayout>
<h1>Blog</h1>
<h2>Listado de posts </h2>


   {
    // Lista de Posts
      showPosts?.map(item => (
        !item.node.isRestricted ? (  
            <h3><a href={`/blog/${item.node.slug}`}>{item.node.title}</a></h3>
            ) : null
      ))
  
  }

  <div class="paginador">
    {  
      // Paginacion
       
          Array.from({ length: totalPages }).map( (_, index) => (
            <a href={`${Astro.url.origin}${Astro.url.pathname}?page=${index + 1}`}>{index + 1}</a>
          ))

    }
  </div>
</MainLayout>